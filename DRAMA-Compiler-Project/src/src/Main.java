package src;

import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

import model.Program;
import parser.CParser;
import util.ErrorHandler;
import util.ErrorType;
import util.Message;
import util.ResultException;
import util.URL;

public class Main {
	
	private static CParser parser = new CParser();
	private static ErrorHandler errorHandler = new ErrorHandler();
	private static Message message = new Message();
	public static Program program = null;
	private static Scanner scanner = new Scanner(System.in);
	
	
	
	public static void main(String[] args) {
//		System.out.println("Working Directory = " + System.getProperty("user.dir"));
		System.out.println("DRAMA-Compiler (v0.1)");
		int exitcode = 1;
		try {
			if (args.length == 0)
				handleNoArgs();
			else if (args.length == 2)
				handleArgs(args[0], args[1]);
			else
				System.out.format("Invalid number of arguments given.");
		} catch (ResultException e) {
			exitcode = e.getResult();
		}
		System.out.format("Exited with exitcode: %d", exitcode);
		scanner.close();
	}
	
	
	
	public static void tryRead(String input) throws ResultException {
		try {
			FileReader testReader = new FileReader(input);
			testReader.close();
			System.out.format("Reading: %s ...%n", input);
		} catch (IOException e) {
			errorHandler.handleIOError(ErrorType.INPUTIO);
			throw new ResultException(1);
		}	
	}
	
	public static void tryWrite(String output) throws ResultException {
		try {
		    PrintWriter writer = new PrintWriter(output, "UTF-8");
		    writer.println("| File generated by DRAMA-Compiler");
		    writer.close();
		    System.out.format("Writing: %s ...%n", output);;
		} catch (IOException e) {
			errorHandler.handleIOError(ErrorType.OUTPUTIO);
			throw new ResultException(1);
		}
	}
	
	public static void tryParse(String input) throws ResultException {
		try {
			program = parser.parse(new URL(input));
			if (program == null)
				throw new NullPointerException();
		} catch (IOException e) {
			errorHandler.handleIOError(ErrorType.UNKOWNIO);
			throw new ResultException(1);
		} catch(RuntimeException e){
			errorHandler.handleCompilationError(ErrorType.GENERALPARSE);
			throw new ResultException(1);
		}
	}
	
	public static void tryCompile(String output) throws ResultException {
		try {
			program.compile(new URL(output));
		} catch (IOException e) {
			errorHandler.handleIOError(ErrorType.UNKOWNIO);
			throw new ResultException(1);
		} catch(RuntimeException e){
			errorHandler.handleCompilationError(ErrorType.GENERALCOMPILE);
			throw new ResultException(1);
		}
	}
	

	
	public static void handleArgs(String input, String output) throws ResultException {
		System.out.println("Handling Command Line Args");
		tryRead(input);	
		tryParse(input);
		tryWrite(output);
		tryCompile(output);
	}
	
	
	public static boolean continueUser(String user) throws ResultException {
		if (user.equals("help()")) {
			System.out.println(message.getHelpMessage());
			return false;
		} else if (user.equals("quit()")) {
			System.out.println("Quitting...");
			throw new ResultException(0);
		} else if (user.equals("license()")) {
			System.out.println(message.getMIT());
			return false;
		} return true;
	}
	
	
	public static void handleNoArgs() throws ResultException {
		System.out.println("Handling No Command Line Args");
		System.out.println("Type license() for license, help() for help, quit() to quit");
		String user = null;
		boolean userSet = false;
		
		while (!userSet) {
			System.out.format("Enter target input file: ");
			user = scanner.nextLine();
			if (!continueUser(user)) continue;
			userSet = true;
			try {
				tryRead(user);
			} catch (ResultException e) {
				userSet = false;
			}
		}
		tryParse(user);
		
		userSet = false;
		while (!userSet) {
			System.out.format("Enter target output file: ");
			user = scanner.nextLine();
			if (!continueUser(user)) continue;
			userSet = true;
			try {
				tryWrite(user);
			} catch (ResultException e) {
				userSet = false;
			}
		}
		tryCompile(user);
	}
	
}
